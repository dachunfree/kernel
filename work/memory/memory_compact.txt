https://www.cnblogs.com/tolimit/p/5286663.html


　　其实一句话可以概括页面迁移时是如何进行同步的，就是：我要开始对这个页进行页面迁移处理了，你们这些访问此页的
进程都给我加入等待队列等着，我处理完了就会唤醒你们。

　　如果需要详细些说，那就是内存碎片整理中即将对一个页进行迁移工作，首先会对这个旧页上锁(置位此页的PG_locked标志)，
然后新建一个页表项数据，这个页表项数据属于swap类型，这个页表项数据映射的是这个旧页，然后把这个页表项数据写入所有映
射了此旧页的进程页表项中，将旧页数据和参数复制到新页里，再新建一个页表项数据，这个页表项数据就是常规的页表项数据，
这个页表项数据映射的是这个新页，然后把这个页表项数据写入到之前所有映射了旧页的进程页表项中，释放锁，唤醒等待的进程


内存规整时机：
1.内核从伙伴系统以min阀值获取连续页框，但是连续页框又不足时。
2.当需要从指定地方获取连续页框，但是中间有页框正在使用时。
3.因为内存短缺导致kswapd被唤醒时，在进行内存回收之后会进行内存碎片整理。
4.将1写入sysfs中的/vm/compact_memory时，系统会对所有zone进行内存碎片整理。

系统判定是否执行内存碎片整理的标准是：

1.在分配页框过程中，zone显示是有足够的空闲页框供于本次分配的，但是伙伴系统链表中又没有连续页框段用于本次分配。
	原因就是过多分散的空闲页框，它们没办法组成一块连续页框存放在伙伴系统的链表中。
2.在kswapd唤醒后会对zone的页框阀值进行检查，如果可用页框少于高阀值则会进行内存回收，每次进行内存回收之后会进行内存碎片整理。

结束时机：
1.可移动页框扫描的位置是否已经超过了空闲页框扫描的位置，超过则结束整理，并且会重置zone->compact_cached_free_pfn和
zone->compact_cached_migrate_pfn，并且不是kswap时，会设置zone->compact_blockskip_flush为真。
2.zone的空闲页框数量满足了 (zone的low阀值 + 1<<order + zone的保留页框) 条件。
3.判断伙伴系统中是否有比order值大的空闲连续页框块，有则结束整理，如果order为-1，则忽略此条件
__unmap_and_move步骤：

1.先对被迁移的页page上锁，置位PG_locked标志。（异步模式拿不到锁则直接跳过该页面的迁移工作）.
2.再判断被迁移页page是否正在回写，若在回写则根据迁移模式来判断是否等待被迁移页的回写：
	a.MIGRATE_SYNC_LIGHT和MIGRATE_ASYNC不等待
	b.MIGRATE_ASYNC等待
2.接着新建一个页表项entry1，这个页表项entry类似于swap页的页表项，其指向的页不在物理内存中，但是页表项entry1的偏移 
  量是page页对应的页框号.
3.紧接着通过反向映射找到所有映射了被迁移页page的进程页表项，找到后将这些进程映射的页表项都用页表项entry1替换。(在这以
	后若有进程想通过虚拟地址访问被迁移页page，都会触发缺页中断，并在缺页处理流程中因等待page的页锁而进入等待状 
  态，只有page迁移完成后释放其页锁，这些进程才会被再次唤醒，再次唤醒通过同样的虚拟地址去访问物理页时映射的页由page 
  变为newpage)
4.然后获取待迁入页newpage的页面锁PG_locked (newpage正常情况下页锁不会获取失败，因为该页隔离前为空闲页）
5.最后将被迁移页page的数据和参数复制到新页newpage中，再新建一个页表项entry2，entry2是常规页表项数据,其偏移量是 
  newppage对应的物理页框号，新页表项entry2创建完后用它将之前所有映射了被迁移页page的进程页表项替换，释放锁，唤醒
  等待的进程。
 到此page到newpage的页迁移流程执行完毕
 
 
 
在linux初始化启动过程中，linux进程的祖先0号进程，生俩孩子1号进程和2号进程后，父进程释放cpu，调度1号进程和2号进程两个子进程。
在此调度切换过程中，两个子进程非但没有调度起来，且出现中断完全没了，系统完全hung住，直到watchdog重启系统。父子进程切换过程有些
代码是通过汇编实现，不太好debug。我找了arm的调试器ds-5（可以单步调试），但是目前没有转接线，硬件同事得等几天才有时间去做。

 
 [    0.000000] ************early_mem:start = 0, size = 20000000
[    0.000000] Memory policy: ECC disabled, Data cache writealloc
Early printk initialized
[    0.000000] i = 0, start = 0, end = 18000
[    0.000000] min = 0
[    0.000000] max_low = 18000
[    0.000000] i = 1, start = 18000, end = 20000
[    0.000000] *****************high_memory = d8000000**********
[    0.000000] Built 1 zonelists in Zone order, mobility grouping off.  Total pages: 125952
[    0.000000] Kernel command line: console=ttyS0,115200 mem=512M root=/dev/mmcblk0p2 rw rootwait init=/sbin/init earlyprintk product=npec01c_basic_5g-d isolcpus=1
[    0.000000] Memory: 487316k/487316k available, 36972k reserved, 131072K highmem
[    0.000000] Virtual kernel memory layout:
[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)
[    0.000000]     fixmap  : 0xfff00000 - 0xfffe0000   ( 896 kB)
[    0.000000]     DMA     : 0xffc00000 - 0xffe00000   (   2 MB)
[    0.000000]     vmalloc : 0xd8800000 - 0xe0000000   ( 120 MB)
[    0.000000]     lowmem  : 0xc0000000 - 0xd8000000   ( 384 MB)
[    0.000000]     pkmap   : 0xbfe00000 - 0xc0000000   (   2 MB)
[    0.000000]     modules : 0xbf000000 - 0xbfe00000   (  14 MB)
[    0.000000]       .init : 0xc0008000 - 0xc002e000   ( 152 kB)
[    0.000000]       .text : 0xc002e000 - 0xc048f640   (4486 kB)
[    0.000000]       .data : 0xc0490000 - 0xc04bc5e0   ( 178 kB)
[    0.000000]        .bss : 0xc04bc604 - 0xc0f97f4c   (11119 kB)


[    0.250000] CPU1: Booted secondary processor
[    0.340000] xi2cps_probe
[    0.340000] apapter id=0
[    0.340000] xi2cps_probe


[    0.160000] pre_pid = 0,next_pid=2
[    0.170000] pre_pid = 2,next_pid=1
[    0.180000] 
[    0.190000] pre_pid = 1,next_pid=2


正确：
[    0.150000] pre_pid = 0,next_pid=2
[    0.150000] 
[    0.160000] pre_pid = 2,next_pid=1
[    0.160000] 
[    0.160000] kernel_init 0.............
[    0.160000] 
[    0.170000] pre_pid = 1,next_pid=2
[    0.170000] 
[    0.170000] kthreadd 0.....................
[    0.170000] 
[    0.180000] pre_pid = 2,next_pid=1
[    0.180000] 
[    0.180000] kernel_init 1.............
[    0.180000] 
[    0.190000] pre_pid = 1,next_pid=2
[    0.190000] 
[    0.190000] kthreadd 1.....................
[    0.190000] 
[    0.200000] pre_pid = 2,next_pid=1
[    0.200000] 
[    0.200000] kernel_init 2.............
[    0.200000] 
[    0.210000] pre_pid = 1,next_pid=2
[    0.210000] 
[    0.210000] kthreadd 2.....................
[    0.210000] 
[    0.220000] pre_pid = 2,next_pid=1
[    0.220000] 
[    0.230000] pre_pid = 1,next_pid=2
[    0.230000] 
[    0.230000] kthreadd 3.....................
[    0.230000] 

