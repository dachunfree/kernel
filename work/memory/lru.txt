lru链表的组成:
https://www.cnblogs.com/tolimit/p/5447448.html 

lru缓存
　　上面说到，当需要修改lru链表时，一定要占有zone中的lru_lock这个锁，在多核的硬件环境中，在同时需要对lru链表进行修改时，
锁的竞争会非常的频繁，所以内核提供了一个lru缓存的机制，这种机制能够减少锁的竞争频率。其实这种机制非常简单，lru缓存相当于
将一些需要相同处理的页集合起来，当达到一定数量时再对它们进行一批次的处理，这样做可以让对锁的需求集中在这个处理的时间点，
而没有lru缓存的情况下，则是当一个页需要处理时则立即进行处理，对锁的需求的时间点就会比较离散。首先为了更好的说明lru缓存，
先对lru链表进行操作主要有以下几种：

*将不处于lru链表的新页放入到lru链表中
*将非活动lru链表中的页移动到非活动lru链表尾部(活动页不需要这样做，后面说明)
*将处于活动lru链表的页移动到非活动lru链表
*将处于非活动lru链表的页移动到活动lru链表
*将页从lru链表中移除

这样就会涉及到一个问题，由于页被访问时，访问了此页的进程对应此页的页表项中的Accessed会置位，表面此页被访问了，而lru链表
只有在进行内存回收时才会进行判断，那就会有一种情况，在一个小时之内，内存空闲页富足，这一个小时中都没有发生内存回收，而这
一个小时中，所有进程使用的内存页都进行过了访问，也就是每个页反向映射到进程页表项中总能找到有进程访问过此页，这时候内存回
收开始了，lru链表如何将这些页判断为活动页还是非活动页？可以说，在这种情况，第一轮内存回收基本上颗粒无收，因为所有页都会被
判定为活动页，但是当第二轮内存回收时，就可以正常判断了，因为每一轮内存回收后，都会清除所有访问了此页的页表项的Accessed标志，
在第二轮内存回收时，只有在第一轮内存回收后与第二轮内存回收开始前被访问过的页，才会被判断为最近被访问过的页。


１．当vma flag中标记VM_LOCKED时，表示这段内存不能被回收，要常驻内存中.

2.当ZONE的空闲页面数大于WMARK_HIGH时，这个ZONE就可认为是balanced(由函数zone_balanced()判断)

3.当ZONE的水位低于WMARK_LOW时，触发内核启动内存回收,当ZONE的水位高于WMARK_LOW时，停止内存回收.

４．Page相关标志位。

PageWriteback(page)检查page是否设置PG_PageWriteback标志位,表示页面正在回写磁盘：

PG_writeback:is set before writeback starts and cleared when it finishes

PG_locked : This bit is set before I/O　and cleared when writeback _starts_ or when read _completes_.

PG_uptodate : tells whether the page's contents is valid.? When a read? completes, the page becomes uptodate

PG_referenced/PG_reclaim :are used for page reclaim for anonymous and file-backed pagecache

PG_head: 表示这个页是head page

PG_unevictable:表示页面不可回收.

PG_PageReclaim：如果页面是Dirty或者处于writeback状态，那么这种页面会放到不活跃链表头，并设置PG_PageReclaim.

PG_swapcache:表示页面是否分配了swap空间 PageSwapCache(page)

PageSwapBacked(page)：检查page是否为匿名页面,Page is backed by RAM/swap

对PG_swapcache和PG_SwapBacked的一点理解,swapcache表示匿名页面已经交换(swap)到磁盘,

而SwapBacked,表示匿名页面的内容已经从磁盘换回(backed)到内存中.
设置page的标志位函数定义在头文件:include/linux/page-flags.h

5 共享匿名映射内存实现时，虽然关联到/dev/zero结点,当分配的内存page,挂接到lrulist的匿名非活跃链表。

6.　内核分配的内存kmalloc/alloc_page/vmalloc等等，不会挂接到zone的lrulist

７手动释放page cache

To free pagecache:
echo 1 > /proc/sys/vm/drop_caches
To free dentries and inodes:
echo 2 > /proc/sys/vm/drop_caches
To free pagecache, dentries and inodes:
echo 3 > /proc/sys/vm/drop_caches
